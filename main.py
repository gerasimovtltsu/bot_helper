import json
import logging

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters.command import Command
from aiogram.filters import StateFilter
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, ADMIN_BOT_TOKEN
import keyboard_handlers

import psycho_tests.resilience_test, psycho_tests.psm25


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)

admin_to_user_map = {} # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∞ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

with open("keyboard.json", "r", encoding='utf8') as kbd_layout:
    kbd_json = json.load(kbd_layout)

keyboard = ReplyKeyboardMarkup(**kbd_json)

bot = Bot(token=BOT_TOKEN)
admin_bot = Bot(token=ADMIN_BOT_TOKEN)
router = Router()

dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)
admin_dp = Dispatcher(storage=MemoryStorage())

@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer_photo(
        types.FSInputFile(path="pictures/welcome_picture.jpg")
    )
        
    await message.answer(
        text= "üåø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏!\n" + \
        "üåü –ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –í–∞–º —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.\n" + \
        "‚è∞ –ù–∞—à —á–∞—Ç-–±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –í–∞—Å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n" + \
        "üìû –î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –≤ –º–µ–Ω—é –ø—É–Ω–∫—Ç '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º'. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n" + \
        "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø–æ–º–æ—â—å –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞, –∏ –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–∂–µ–º –≤ –í–∞—à–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é.\n" + \
        "üå∫ –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –í—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç–µ –∑–∞–±–æ—Ç—É –∏ –≤–Ω–∏–º–∞–Ω–∏–µ!",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.message(lambda message: message.text == 'üôã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º')
async def handle_consultation(message: types.Message, state: FSMContext):
    await state.clear()  # –Ø–≤–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await keyboard_handlers.handle_consultation(message, state)

@dp.message(lambda message: message.from_user.id == keyboard_handlers.SPECIALIST_CHAT_ID)
async def forward_to_user(message: types.Message, state: FSMContext):
    await keyboard_handlers.forward_to_user(message, state)

@dp.message(lambda message: message.text == "üìù –¢–µ—Å—Ç –∂–∏–∑–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç–∏ (–°. –ú–∞–¥–¥–∏, –∞–¥–∞–ø—Ç–∞—Ü–∏—è –î.–ê. –õ–µ–æ–Ω—Ç—å–µ–≤–∞)")
async def handle_test(message: types.Message, state: FSMContext):
    await state.clear()
    await psycho_tests.resilience_test.start_test(message, state)

@dp.message(lambda message: message.text == "üìù –ú–µ—Ç–æ–¥–∏–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –†S–ú 25 (–ø–µ—Ä–µ–≤–æ–¥ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ù. –ï. –í–æ–¥–æ–ø—å—è–Ω–æ–≤–æ–π)")
async def handle_psm_test(message: types.Message, state: FSMContext):
    await state.clear()
    await psycho_tests.psm25.start_psm(message, state)

@dp.message()
async def forward_all_messages_to_specialist(message: types.Message, state: FSMContext):
    if message.text != "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await keyboard_handlers.forward_to_specialist(message, state)
    else:
        await end_consultation(message, state)  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.message(Command('end_consultation'))
async def end_consultation(message: types.Message, state: FSMContext):
    await keyboard_handlers.end_consultation(message, state)

@dp.message(lambda message: message.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é')
async def end_consultation_text(message: types.Message, state: FSMContext):
    await keyboard_handlers.end_consultation(message, state)

async def forward_to_admin(message: types.Message):
    forwarded_message = await admin_bot.forward_message(chat_id=ADMIN_CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)
    admin_to_user_map[forwarded_message.message_id] = message.chat.id

@admin_dp.message(lambda message: message.reply_to_message and message.reply_to_message.message_id in admin_to_user_map)
async def handle_admin_response(message: types.Message):
    user_chat_id = admin_to_user_map[message.reply_to_message.message_id]
    await admin_bot.send_message(chat_id=user_chat_id, text=message.text)

@admin_dp.message(lambda message: message.reply_to_message and message.reply_to_message.message_id in keyboard_handlers.specialist_to_user_map)
async def handle_specialist_response(message: types.Message):
    user_chat_id, original_message_id = keyboard_handlers.specialist_to_user_map[message.reply_to_message.message_id]
    await bot.send_message(chat_id=user_chat_id, text=message.text, reply_to_message_id=original_message_id)

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    if current_state == "TestStates:waiting_for_answer":
        answer = callback_query.data
        await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        if answer not in ['–ù–µ—Ç', '–°–∫–æ—Ä–µ–µ –Ω–µ—Ç', '–°–∫–æ—Ä–µ–µ –¥–∞', '–î–∞']:
            await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        user_data = await state.get_data()
        user_data['answers'].append(answer)
        user_data['index'] += 1
        await state.set_data(user_data)
        await psycho_tests.resilience_test.send_question(callback_query.message, state)
    elif current_state == "PSMStates:psm_answer":
        await handle_psm_test(callback_query, state)
    else:
        # –í–æ–∑–≤—Ä–∞—Ç, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        await callback_query.answer()
        return


async def handle_psm_test(callback_query: types.CallbackQuery, state: FSMContext):
    answer = callback_query.data
    user_data = await state.get_data()
    user_data['answers'].append(int(answer))
    user_data['index'] += 1
    await state.set_data(user_data)
    await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
    await psycho_tests.psm25.send_psm_question(callback_query.message, state)



async def main():
    await dp.start_polling(bot)
    await admin_dp.start_polling(admin_bot)

if __name__ == '__main__':
    import asyncio
    # psycho_tests.resilience_test.register_handlers_test(dp)
    asyncio.run(main())