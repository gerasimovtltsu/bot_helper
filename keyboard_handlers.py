from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from main import keyboard as main_keyboard

SPECIALIST_CHAT_ID = 288957466
active_consultations = {}

class UserState(StatesGroup):
    in_consultation = State()
    not_consult = State()


async def handle_consultation(message: types.Message, state: FSMContext):
    await state.set_state(UserState.in_consultation)
    active_consultations[SPECIALIST_CHAT_ID] = message.chat.id
    consult_kb = [
        [KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é")]
    ]
    finish_consult_kbd = ReplyKeyboardMarkup(
        keyboard=consult_kb,
        one_time_keyboard=True,
        resize_keyboard=True,
        input_field_placeholder="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é`")
    await message.reply(
        text="–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n" + \
        "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç \n" + \
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É `üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é`",
        reply_markup=finish_consult_kbd, parse_mode='MarkdownV2'
    )
    if message.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é':
            await end_consultation(message, state.get_state())

async def forward_to_specialist(message: types.Message, state: FSMContext):
    if await state.get_state() == UserState.in_consultation.state:
        await message.bot.forward_message(chat_id=SPECIALIST_CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

async def forward_to_user(message: types.Message, state: FSMContext):
    if message.reply_to_message:
        await message.bot.forward_message(chat_id=message.reply_to_message.forward_from.id, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç")

async def end_consultation(message: types.Message, state: FSMContext):
    if await state.get_state() == UserState.in_consultation.state:
        if message.text == 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é':
            await state.clear()
            await message.answer('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!', reply_markup=main_keyboard)

# def register_handlers(dp: Dispatcher):
#     dp.register_message_handler(handle_consultation, commands=['start_consultation'], state=UserState.in_consultation)
#     dp.register_message_handler(forward_to_specialist, state=UserState.in_consultation)
#     dp.register_message_handler(forward_to_user, state=UserState.in_consultation)
#     dp.register_message_handler(end_consultation, commands=['end_consultation'], state='')
